[{"title":"算法题目记录","path":"/2023/01/07/算法题目记录/","content":"算法学习过程中的刷题记录 DFS排列数字https://www.acwing.com/problem/content/844/题目位置 AC代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;const int N = 10;int n;int path[N];bool st[N];using namespace std;void dfs(int u)&#123; if(u==n) &#123; for(int i=0;i&lt;n;i++)printf(&quot;%d &quot;,path[i]); puts(&quot;&quot;); &#125; for(int i=1;i&lt;=n;i++) &#123; if(!st[i]) &#123; path[u] = i; st[i] = true; dfs(u+1); st[i] = false; &#125; &#125; &#125;int main()&#123; scanf(&quot;%d&quot;,&amp;n); dfs(0); return 0;&#125; 记录没啥好记录的","categories":["程序","ACM"]},{"title":"博客容器类标签测试","path":"/2023/01/06/博客容器类标签测试/","content":"博客的容器类标签使用笔记 封面 ablock 普通块容器note 标签就是用 ablock 容器实现的，他们的样式是相同的: 123&#123;% ablock [title] [color:color] [child:codeblock/tabs] %&#125;...&#123;% endablock %&#125; 写法如下: Stellar v1.12.0因为原 noteblock 标签在升级到hexo 6.0 后跟官方库冲突了，官方一直没有解释原因，后不得不改名:noteblock -&gt; grid -&gt; border -&gt; ablock 123&#123;% ablock Stellar v1.12.0 color:warning %&#125;因为原 noteblock 标签在升级到hexo 6.0 后跟官方库冲突了，官方一直没有解释原因，后不得不改名:noteblock -&gt; grid -&gt; border -&gt; ablock&#123;% endablock %&#125; 彩色代码块设置child:codeblock并设置color:颜色枚举可以实现10中不同颜色的代码块，彩色代码块一般可以用在代码正确与错误的示范对比场景 ColorCode123func test()&#123; //...&#125; 嵌套其他标签例如嵌套一个tabs标签 图文混排示例代码个人电脑作为办公设备时，我们该如何保护隐私 ?公司一般都会强制安装安防软件，这些软件要求开机自启动，要求有屏幕录制权限、完全的磁盘访问权限包括相册图库。因此如果使用自己的 MacBook 作为办公设备，必须要把生活区和工作区完全独立开，安装在两个磁盘分区，并且对磁盘分区进行加密。123456789&#123;% ablock child:tabs %&#125;&#123;% tabs %&#125;&lt;!-- tab 图文混排 --&gt;&#123;% image /assets/mizu.jpg fancybox:true 个人电脑作为办公设备时，我们该如何保护隐私 ? %&#125;公司一般都会强制安装安防软件，这些软件要求开机自启动，要求有屏幕录制权限、完全的磁盘访问权限包括相册图库。因此如果使用自己的 MacBook 作为办公设备，必须要把生活区和工作区完全独立开，安装在两个磁盘分区，并且对磁盘分区进行加密。&lt;!-- tab 示例代码 --&gt;code&#123;% endtabs %&#125;&#123;% endablock %&#125; folding 折叠容器折叠块标签的语法格式为: 123&#123;% folding title [child:codeblock][open:bool][color:color]%&#125;content&#123;% endfolding %&#125; 参数说明123child:codeblock 是否是代码状态open:true/flasecolor: red/orange/yellow/green/cyan/blue/purple/light/dark 示例: 可折叠容器默认情况下open:false除了标题之外都会折叠进去 写法1234&#123;% folding 可折叠容器 %&#125;默认情况下`open:false`除了标题之外都会折叠进去&#123;% endfolding %&#125; folders多个折叠容器聚合样式相比folding简单一些，适用于多个折叠标签平铺显示的场景，例如题目列表: 题目1这是答案题目2这是答案题目3这是答案 实现代码12345678&#123;% folders %&#125;&lt;!-- folder 题目1 --&gt;这是答案&lt;!-- folder 题目2 --&gt;这是答案&lt;!-- folder 题目3 --&gt;这是答案&#123;% endfolders %&#125; tabs 分栏容器这个标签移植自NexT主题,但是做了以下修改: 支持设置align:center来使内容居中 设置默认激活的标签方式为active:1而非.1(使用默认格式降低学习成本，且显式声明可读性更强) 不需要&lt;!-- endtab --&gt;来作为结束标识(因为 Stellar 会自动判断) 不需要tabs id来保证唯一性(因为 Stellar 会设置唯一标识) 不支持@icon方式设置图标(因为 Stellar 不再内置fontawesome图标库) 轮廓样式简化，可以搭配其他容器类标签嵌套使用。 演示效果示例代码图片代码块表格12let x = 123print(&quot;Hello World&quot;) a b c a1 a2 a3 a2 b2 c2 1234567891011121314151617181920212223242526&#123;% tabs active:1 align:center %&#125;&lt;!-- tab 演示效果 --&gt;&#123;% tabs active:2 align:center %&#125;&lt;!-- tab 图片 --&gt;&#123;% image /assets/p1.jpg width:300px fancybox:true %&#125;&lt;!-- tab 代码块 --&gt;\\```swiftlet x = 123print(&quot;Hello World&quot;)\\```&lt;!-- tab 表格 --&gt;| a | b | c || --- | --- | --- || a1 | a2 | a3 || a2 | b2 | c2 |&#123;% endtabs %&#125;&lt;!-- tab 示例代码 --&gt;&#123;% ablock child:codeblock color:black %&#125;code&#123;% endablock %&#125;&#123;% endtabs %&#125;","categories":["博客","博客界面"]},{"title":"博客表达类标签测试","path":"/2023/01/05/博客表情测试/","content":"表情 使用格式: 1234567&#123;% emoji 爱你 %&#125;&#123;% emoji blobcat ablobcatrainbow %&#125;&#123;% emoji tieba 滑稽 %&#125;&#123;% emoji blobcat ablobcatattentionreverse %&#125; mark行内文本标记支持多彩标记，包括：默认 红 橙 黄 绿 青 蓝 紫 浅 深 警告 错误 一共 12 种颜色。 默认 红 橙色 使用格式: 12345&#123;% mark 默认 %&#125;&#123;% mark 红 color:red %&#125;&#123;% mark 橙色 color:orange %&#125; tag标签效果类似于mark标签，但是支持链接，更适合一批标签独占一行使用 Github Hexo BiliBili 使用格式: 12345&#123;% tag Github https://github.com/lxaDust %&#125;&#123;% tag Hexo https://hexo.io/ %&#125;&#123;% tag BiliBili https://www.bilibili.com/ color:purple %&#125; 图片标签图片描述测试 语法格式: 1&#123;% image src [description] [download:bool/string] [width:px] [padding:px] [bg:hex] %&#125; 参数说明 123456src: 图片地址description: 图片描述download: href # 下载地址，设置此值后鼠标放在图片上会显示下载地址，如果下载地址为图片地址，可以设置为 truewidth: 200px # 图片宽度padding: 16px # 图片四周填充宽度bg: &#x27;#ffffff&#x27; # 图片区域背景颜色，16进制 使用格式: 1&#123;% image /assets/doctor.jpg 图片描述测试 %&#125; 小尺寸图片优化宽度较小而高度较大的图片，可以设置宽、高、填充间距、背景色等对其布局进行优化，使得它在不同宽度的屏幕下都能获得不错的视觉体验 有底色的图片，可以填充图片底色 没有底色的图片，可以填充动态颜色，能够适配暗黑模式 使用格式: 12&#123;% image /assets/applewatch.png 有底色的图片，可以填充图片底色 width:200px padding:16px bg:white %&#125;&#123;% image /assets/星球.svg 没有底色的图片，可以填充动态颜色，能够适配暗黑模式 bg:var(--card) padding:16px %&#125; 支持Fancybox插件点击放大由于 Stellar 主题的插件具有按需加载的特性，所以 Fancybox 插件默认也是已经配置好了的，在任意 image 标签中增加 fancybox:true 参数即可为特定图片开启缩放功能。如果一个页面没有任何地方使用，则不会加载 Fancybox 插件。 点击放大 使用格式: 1&#123;% image /assets/皇女.png 点击放大 fancybox:true%&#125; 如果您希望全站所有的 image 标签都开启此功能，可在主题配置文件中修改以下参数： 12345######## Tag Plugins ########tag_plugins: # &#123;% image %&#125; image: fancybox: true note备注块备注块测试(红色) 备注块测试(默认) 使用格式: 12&#123;% note 备注块测试(红色) color:red %&#125;&#123;% note 备注块测试(默认) %&#125; 123title: 标题（可选）content: 内容color: red/orange/yellow/green/cyan/blue/purple/light/dark/warning/error 具有标题的备注块这是&nbsp标题这是正文，这里可以随意使用 空格 使用格式: 1&#123;% note 这是&amp;nbsp标题 这是正文，这里可以随意使用 空格 %&#125; link链接卡片https://github.com/https://github.com/ https://www.bilibili.com/https://www.bilibili.com/ 使用格式: 12&#123;% link https://github.com/ %&#125;&#123;% link https://www.bilibili.com/ desc:true%&#125; 语法格式: 外链卡片标签的语法格式为： 1&#123;% link href [title] [icon:src] [desc:true/false] %&#125; 参数含义： 1234href: 链接title: 可选，手动设置标题（为空时会自动抓取页面标题）icon: 可选，手动设置图标（为空时会自动抓取页面图标）desc: 可选，是否显示摘要描述，为true时将会显示页面描述 copy复制行 使用格式: 12&#123;% copy curl -s https://sh.xaox.cc/install | sh %&#125;&#123;% copy https://github.com/lxaDust %&#125; navbar导航栏文章内也可以插入一个导航栏： GitHubBiliBili 文本修饰标签集 这是密码标签 这是 下划线 标签 这是 着重号 标签 这是 波浪线 标签 这是 删除线 标签 这是 上角标 标签 这是 下角标 标签 这是 键盘样式 标签，试一试：⌘ + D 使用格式: 12345678- 这是&#123;% psw 密码%&#125;标签- 这是 &#123;% u 下划线 %&#125; 标签- 这是 &#123;% emp 着重号 %&#125; 标签- 这是 &#123;% wavy 波浪线 %&#125; 标签- 这是 &#123;% del 删除线 %&#125; 标签- 这是 &#123;% sup 上角标 color:red %&#125; 标签- 这是 &#123;% sub 下角标 %&#125; 标签- 这是 &#123;% kbd 键盘样式 %&#125; 标签，试一试：&#123;% kbd ⌘ %&#125; + &#123;% kbd D %&#125; quot引用适合居中且醒目的引用 Stellar 是最好用的主题 支持自定义引号: 热门话题 自定义引号素材在主题配置文件的tag_plugins.quot(就在_config.yml)中配置: 123456789tag_plugins: ... # &#123;% quot %&#125; quot: default: # 可以自行配置多种图标方案 prefix: https://bu.dusays.com/2022/10/24/63567d3e092ff.png suffix: https://bu.dusays.com/2022/10/24/63567d3e0ab55.png hashtag: prefix: https://bu.dusays.com/2022/10/24/63567d3e07da3.png 特别引用 此外，加上el:h2&#x2F;h3&#x2F;h4…可以作为标题使用","categories":["博客","博客界面"]},{"title":"前端","path":"/2023/01/04/前端/","content":"前端的学习记录，多为零碎知识点 前端响应式布局： 能够适应 不同大小界面的布局。 CSSmarginmargin属性为给定元素设置四个方向的外边距属性 123456789101112131415161718/* 应用于所有边 */margin: 1em;margin: -3px;/* 上边下边 | 左边右边 */margin: 5% auto;/* 上边 | 左边右边 | 下边 */margin: 1em auto 2em;/* 上边 | 右边 | 下边 | 左边 */margin: 2px 1em 0 auto;/* 全局值 */margin: inherit;margin: initial;margin: unset; auto可以在需要居中时使用。 box-sizing 在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。 box-sizing 属性可以被用来调整这些表现： content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。 border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去 (border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。 border-box不包含margin position各个取值:static 该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。 relative 该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。 absolute 元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。 fixed 元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。(就像是固定在你的屏幕上了) sticky 元素根据正常文档流进行定位，然后相对它的最近滚动祖先（nearest scrolling ancestor）和 containing block (最近块级祖先 nearest block-level ancestor)，包括 table-related 元素，基于top, right, bottom, 和 left的值进行偏移。偏移值不会影响任何其他元素的位置。 该值总是创建一个新的层叠上下文（stacking context）。注意，一个 sticky 元素会“固定”在离它最近的一个拥有“滚动机制”的祖先上（当该祖先的overflow 是 hidden, scroll, auto, 或 overlay时），即便这个祖先不是最近的真实可滚动祖先。这有效地抑制了任何“sticky”行为（详情见Github issue on W3C CSSWG）。 （也固定在你的屏幕上，但是当你滑动到这个东西的正常位置后，他就正常了） clear(清除浮动)clear CSS 属性指定一个元素是否必须移动 (清除浮动后) 到在它之前的浮动元素下面。clear 属性适用于浮动和非浮动元素。 注意是下面，已经指定好方位了。 值 none 元素不会被向下移动以清除浮动。 left 元素被向下移动以清除左浮动。 right 元素被向下移动以清除右浮动。 both 元素被向下移动以清除左右浮动。 inline-start 元素被向下移动以清除其包含块的起始侧浮动，即 ltr 时清除左浮动，rtl 时清除右浮动。 inline-end 元素被向下移动以清除其包含块的结束侧浮动，即 ltr 时清除右浮动，rtl 时清除左浮动。 JavaScriptJS的调用方式与执行顺序使用方式 HTML页面中的任意位置加上&lt;script type=&quot;module&quot;&gt;&lt;/script&gt;标签即可。 常见使用方式有以下几种： 直接在&lt;script type=&quot;module&quot;&gt;&lt;/script&gt;标签内写JS代码。直接引入文件：&lt;script type=&quot;module&quot; src=&quot;/static/js/index.js&quot;&gt;&lt;/script&gt;。将所需的代码通过import关键字引入到当前作用域。例如： /static/js/index.js文件中的内容为： 12345678910let name = &quot;acwing&quot;;function print() &#123; console.log(&quot;Hello World!&quot;);&#125;export &#123; name, print&#125; &lt;script type=&quot;module&quot;&gt;&lt;/script&gt;中的内容为: 123456&lt;script type=&quot;module&quot;&gt; import &#123; name, print &#125; from &quot;/static/js/index.js&quot;; console.log(name); print();&lt;/script&gt; 执行顺序类似于HTML与CSS，按从上到下的顺序执行；事件驱动执行； HTML, CSS, JavaScript三者之间的关系CSS控制HTMLJavaScript控制HTML与CSS为了方便开发与维护，尽量按照上述顺序写代码。例如：不要在HTML中调用JavaScript中的函数。 script type=&quot;module&quot;限制变量的作用域 变量与运算符let与const 用来生命变量，作用范围为当前作用域。 let用来定义变量； const用来定义常量 例如： 12345678let s = &quot;acwing&quot;, x = 5;let d = &#123; name: &quot;yxc&quot;, age: 18,&#125;const n = 100; 变量类型 number：数值变量，例如1, 2.5 string：字符串，例如”acwing”, ‘yxc’，单引号与双引号均可。字符串中的每个字符为只读类型。 boolean：布尔值，例如true, false object：对象，类似于C++中的指针，例如[1, 2, 3]，{name: “yxc”, age: 18}，null undefined：未定义的变量 类似于Python，JavaScript中的变量类型可以动态变化。 运算符 与C++、Python、Java类似，不同点： **表示乘方 等于与不等于用&#x3D;&#x3D;&#x3D;和!&#x3D;&#x3D; parseInt(number)取整 输入与输出输入 从HTML与用户的交互中输入信息，例如通过input、textarea等标签获取用户的键盘输入，通过click、hover等事件获取用户的鼠标输入。 通过Ajax与WebSocket从服务器端获取输入 标准输入，参考AcWing 1. A + B 输出 调试用console.log，会将信息输出到浏览器控制台 改变当前页面的HTML与CSS 通过Ajax与WebSocket将结果返回到服务器 格式化字符串 字符串中填入数值: 12let name = &#x27;yxc&#x27;, age = 18;let s = `My name is $&#123;name&#125;, I&#x27;m $&#123;age&#125; years old.`; 定义多行字符串: 12345let s = `&lt;div&gt; &lt;h2&gt;标题&lt;/h2&gt; &lt;p&gt;段落&lt;/p&gt;/div&gt;` 保留两位小数如何输出: 12let x = 1.234567;let s = `$&#123;x.toFixed(2)&#125;`; 123456789101112131415161718192021222324252627let input = document.querySelector(&#x27;textarea&#x27;)let run = document.querySelector(&#x27;button&#x27;)let output = document.querySelector(&#x27;pre&#x27;)function main() &#123; run.addEventListener(&quot;click&quot;, function () &#123; /* 输入两个数，计算两个数的和 let [a, b] = input.value.split(&#x27; &#x27;); a = parseInt(a), b = parseInt(b); output.innerHTML = a + b; */ /* 输入一个小数，返回向0取整之后的结果 let a = parseFloat(input.value) output.innerHTML = parseInt(a) */ &#125;)&#125;export &#123; main&#125; 判断语句和C++一样。 循环语句感觉和C++一样 杂记Array.from()Array.from() 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。 123456console.log(Array.from(&#x27;foo&#x27;));// expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]console.log(Array.from([1, 2, 3], x =&gt; x + x));// expected output: Array [2, 4, 6] transitionend事件transitionend事件在CSS完成过渡后触发 例： 12keys.forEach(a =&gt; a.addEventListener(&#x27;transitionend&#x27;, removeTransition)) 类似于给一个标签添加了一个动画，在动画结束之后，也就是transition设定的时间结束之后，这个事件才开始执行。 setInterval()函数Window 和 Worker 接口提供的 setInterval() 方法重复调用一个函数或执行一个代码片段，在每次调用之间具有固定的时间间隔。 1setInterval(setDate, 1000); transition-timing-functionCSS 属性受到 transition effect的影响，会产生不断变化的中间值，而 CSS transition-timing-function 属性用来描述这个中间值是怎样计算的。实质上，通过这个函数会建立一条加速度曲线，因此在整个 transition 变化过程中，变化速度可以不断改变。 这条加速度曲线被&#96;&#96; (en-US)所定义，之后作用到每个 CSS 属性的过渡。 你可以规定多个 timing function，通过使用 transition-property属性，可以根据主列表 (transition property 的列表) 给每个 CSS 属性应用相应的 timing function.如果 timing function 的个数比主列表中数量少，缺少的值被设置为初始值（ease） 。如果 timing function 比主列表要多，timing function 函数列表会被截断至合适的大小。这两种情况下声明的 CSS 属性都是有效的。 123456789101112.hand &#123; width: 50%; height: 6px; background-color: black; top: 50%; position: absolute; transform-origin: 100%; transform: rotate(90deg); transition: all .05s; transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);&#125; 结果是表盘的指针移动时会有振动的效果。 align-itemsCSS align-items 属性将所有直接子节点上的 align-self 值设置为一个组。align-self 属性设置项目在其包含块中在交叉轴方向上的对齐方式。 transform-origintransform-origin CSS 属性让你更改一个元素变形的原点。 类似于更改旋转的中心点，围绕哪个点旋转。 change当用户更改&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;元素的值并提交这个更改时，change 事件在这些元素上触发。和 input 事件不一样，change 事件并不是每次元素的 value 改变时都会触发。 text-aligntext-align CSS 属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align 并不控制块元素自己的对齐，只控制它的行内内容的对齐。 1text-align:center//常用于居中。 Array.prototype.reduce()reduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。 第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 initialValue，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。","categories":["程序","前端"]},{"title":"ACM小知识点","path":"/2023/01/04/ACM小知识点，小模板记录/","content":"做算法题时的一些用的较少，但是在适用场合会非常有用的小方法。 ACM小知识点，小模板记录欧几里得算法求最大公约数：123int gcd(int a,int b)&#123;\treturn b ? gcd(b,a%b):a;&#125; 最小公倍数的性质：[a,b] &#x3D; a*b&#x2F;(a,b) [a,b]为最小公倍数 (a,b)为最大公约数 cin和cout的加速有的地方不让用。 12std::ios::sync_with_stdio(false);//消除输入输出缓存std::cin.tie(0);//解除cin与cout的绑定，加快速率 第二个好像可以不用，程序中只需要第一行就能大幅加快速度 还是用print和scanf吧，这个东西不太稳定","categories":["程序","ACM"]},{"title":"Hello World","path":"/2023/01/04/hello-world/","content":"Hello World!Hello My blog! Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"2023年一月新番","path":"/wiki/2023_1_anime/2023年1月新番.html","content":"别当欧尼酱了 下载链接: 智酱是女生 下载链接: 阿鲁斯的巨兽 下载链接: 不相信人类的冒险者接下来要去拯救世界 强烈推荐！！！人设非常好看！ 下载链接:"}]